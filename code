.版本 2
.支持库 spec

.程序集 杂项

.子程序 _取哈希, 整数型
.参数 数据块, 整数型
.参数 块大小, 整数型
.局部变量 哈希, 整数型

.计次循环首 (块大小, )
    哈希 ＝ 左移 (哈希, 8)
    哈希 ＝ 哈希 ＋ 汇编_读字节 (数据块)
    数据块 ＝ 数据块 ＋ 1
.计次循环尾 ()
返回 (哈希)

.子程序 _取文本哈希, 整数型
.参数 地址, 整数型
.局部变量 哈希, 整数型
.局部变量 byte, 整数型

byte ＝ 汇编_读字节 (地址)
地址 ＝ 地址 ＋ 1
.判断循环首 (byte ≠ 0)
    哈希 ＝ 左旋 (哈希, 8)
    哈希 ＝ 哈希 ＋ byte
    byte ＝ 汇编_读字节 (地址)
    地址 ＝ 地址 ＋ 1
.判断循环尾 ()
返回 (哈希)

.子程序 _取函数地址, 整数型
.参数 模块名, 文本型
.参数 函数名, 文本型
.局部变量 基址, 整数型
.局部变量 哈希, 整数型
.局部变量 返回值, 整数型

基址 ＝ LoadLibraryA (取变量数据地址 (模块名))
函数名 ＝ 到小写 (函数名)
哈希 ＝ 取变量数据地址 (函数名)
哈希 ＝ _取文本哈希 (哈希)
返回值 ＝ _取函数 (基址, 哈希, 0, 真)
.如果真 (返回值 ≠ 0)
    返回值 ＝ 返回值 ＋ 基址
.如果真结束
返回 (返回值)

.子程序 左旋, 整数型
.参数 数值, 整数型
.参数 位数, 整数型
.局部变量 高位, 整数型
.局部变量 低位, 整数型

高位 ＝ 左移 (数值, 位数)
低位 ＝ 位与 (右移 (高位, 位数), 十六进制 (“00FFFFFF”))
低位 ＝ 右移 (数值 － 低位, 24)
高位 ＝ 高位 ＋ 低位
返回 (高位)

.子程序 汇编_读整数, 整数型
.参数 地址, 整数型
.局部变量 eax, 整数型

置入代码 ({ 139, 69, 8, 139, 0, 137, 69, 252 })
返回 (eax)

.子程序 汇编_写整数
.参数 地址, 整数型
.参数 数值, 整数型

置入代码 ({ 139, 69, 8, 255, 117, 12, 143, 0 })

.子程序 汇编_读单字, 整数型
.参数 地址
.局部变量 eax, 整数型

置入代码 ({ 139, 69, 8, 15, 183, 0, 137, 69, 252 })
返回 (eax)

.子程序 汇编_读字节, 整数型
.参数 地址, 整数型
.局部变量 eax, 整数型

置入代码 ({ 139, 69, 8, 15, 182, 0, 137, 69, 252 })
返回 (eax)

.子程序 汇编_写字节
.参数 地址, 整数型
.参数 数值, 整数型

置入代码 ({ 81, 139, 69, 8, 138, 77, 12, 136, 8, 89 })

.子程序 汇编_jmp_eax, 整数型
.参数 地址, 整数型

置入代码 ({ 139, 69, 8, 201, 131, 196, 8, 255, 116, 36, 248, 255, 224 })
返回 (0)

.子程序 位移, 整数型, 公开, 无符号
.参数 数值, 整数型
.参数 位数, 整数型
.参数 方向, 逻辑型, , 真:左移 假:右移
.局部变量 ret, 整数型

.如果 (方向)
    ret ＝ 左移 (数值, 位数)
.否则
    ret ＝ 右移 (数值, 位数)
.如果结束
ret ＝ 到整数 (取绝对值 (ret))
返回 (ret)

.子程序 汇编_push
.参数 数值, 整数型

置入代码 ({ 201, 195 })

.子程序 汇编_uk_call, 整数型
.参数 地址, 整数型
.参数 esp, 整数型
.参数 sum_esp, 整数型, 参考, 调用函数的差值
.局部变量 临时地址, 整数型, , , -4
.局部变量 _esp, 整数型, , , -8
.局部变量 o_esp, 整数型, , , -c
.局部变量 ret, 整数型, , , -10
.局部变量 i, 整数型, , , -14

置入代码 (#VM开始_虚拟)
临时地址 ＝ esp ＋ 4
临时地址 ＝ 临时地址 ＋ 16 × 4
_esp ＝ 0
o_esp ＝ 0
ret ＝ 0
i ＝ 0
' mov [ebp-0c],esp
置入代码 ({ 137, 101, 244 })
.判断循环首 (i ＜ 16)
    临时地址 ＝ 临时地址 － 4
    汇编_push (汇编_读整数 (临时地址))
    i ＝ i ＋ 1
.判断循环尾 ()
' mov [ebp-08h],esp
置入代码 ({ 137, 101, 248 })
' ret= call [ebp+8]
置入代码 ({ 255, 85, 8, 137, 69, 240 })
' {137,101,236}
置入代码 ({ 137, 101, 236 })
' mov esp,[ebp-0c]
置入代码 ({ 139, 101, 244 })
sum_esp ＝ i － _esp
返回 (ret)

.子程序 汇编_xor, 整数型
.参数 数值1, 整数型
.参数 数值2, 整数型
.局部变量 eax, 整数型

置入代码 ({ 139, 69, 8, 51, 69, 12, 137, 69, 252 })
返回 (eax)
